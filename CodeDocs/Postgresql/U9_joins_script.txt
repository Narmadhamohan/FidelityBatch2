DDL for employees table
drop table employees;
drop view emp;:

CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    department VARCHAR(50) NOT NULL,
    position VARCHAR(50) NOT NULL
);

-- Insert sample data into employees
INSERT INTO employees (name, department, position) VALUES
('Alice Johnson', 'HR', 'Manager'),
('Bob Smith', 'Finance', 'Analyst'),
('Charlie Brown', 'Engineering', 'Developer'),
('David Wilson', 'Engineering', 'Senior Developer'),
('Eve Davis', 'Marketing', 'Executive');


****************************************************************************************
DDL for assets Table

CREATE TABLE assets (
    asset_id SERIAL PRIMARY KEY,
    asset_name VARCHAR(100) NOT NULL,
    assigned_to INT,
    FOREIGN KEY (assigned_to) REFERENCES employees(employee_id)
);

-- Insert sample data into assets
INSERT INTO assets (asset_name, assigned_to) VALUES
('Laptop', 1),    -- Assigned to Alice
('Monitor', 2),   -- Assigned to Bob
('Phone', NULL),  -- Not assigned
('Tablet', 4),    -- Assigned to David
('Keyboard', 1);  -- Assigned to Alice


Important to understand data:  select * from employees;
select * from assets;


**********************************************************************************
 INNER JOIN
Query: Retrieve all employees and their assigned assets.

sql
Copy code
SELECT 
    e.name AS employee_name,
    a.asset_name
FROM 
    employees e
INNER JOIN 
    assets a ON e.employee_id = a.assigned_to;

********************************************************************************
LEFT JOIN
Query: Retrieve all employees and their assigned assets, including those who have no assets.

sql
Copy code
SELECT 
    e.name AS employee_name,
    a.asset_name
FROM 
    employees e
LEFT JOIN 
    assets a ON e.employee_id = a.assigned_to;

**************************************************************************

RIGHT JOIN
Query: Retrieve all assets and their assigned employees, including assets that are not assigned to anyone.

sql
Copy code
SELECT 
    e.name AS employee_name,
    a.asset_name
FROM 
    employees e
RIGHT JOIN 
    assets a ON e.employee_id = a.assigned_to;

*********************************************************************
-- self join
drop table employees cascade;

CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    manager_id INT,
    FOREIGN KEY (manager_id) REFERENCES employees(employee_id) -- Self-referencing foreign key
);

-- Insert sample data into employees
INSERT INTO employees (name, manager_id) VALUES
('Alice Johnson', NULL),       -- Alice is at the top level (CEO)
('Bob Smith', 1),              -- Bob reports to Alice
('Charlie Brown', 1),          -- Charlie reports to Alice
('David Wilson', 2),           -- David reports to Bob
('Eve Davis', 2),              -- Eve reports to Bob
('Frank Miller', 3);           -- Frank reports to Charlie

-- check it and see how to do?
select * from employees;

SELECT 
    e1.name AS employee_name,
    e2.name AS manager_name
FROM 
    employees e1
LEFT JOIN 
    employees e2 ON e1.manager_id = e2.employee_id;
